CREATE OR REPLACE FUNCTION "programs"()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'pr_day') THEN 
    CREATE type pr_day as enum('Monday' ,'Tuesday','Wednesday', 'Thursday','Friday','Saturday','Sunday')  ;END IF;
    DROP TABLE IF EXISTS programs cascade;
    CREATE TABLE IF NOT EXISTS programs
    (
        identry SERIAL,
        sid int,
        name varchar(100),
        rating varchar,
        strtime timestamp,
        endtime timestamp,
        time int,
        day pr_day,
        primary key(identry)
    );
    
    
    
    END;
$function$;

select programs();


Drop trigger IF EXISTS updateTimeT on programs;

CREATE OR REPLACE FUNCTION updateTime()
RETURNS trigger 
LANGUAGE plpgsql
AS $$
begin
    update programs set endtime = new.strtime + (new.time * interval '1 minute') where identry=new.identry;
    return new;
end;
$$;

CREATE TRIGGER updateTimet
after insert on programs
For each row execute procedure updateTime();

INSERT INTO programs(sid,name,rating,strtime,time,day) values ('1','kalhmera','18','0001/01/1 00:30','45','Monday');
INSERT INTO programs(sid,name,rating,strtime,time,day) values ('1','kalhmera','18','0001/01/1 23:00','102','Monday');
INSERT INTO programs(sid,name,rating,strtime,time,day) values ('1','kalhmera','18','0001/01/2 2:00','60','Tuesday');
INSERT INTO programs(sid,name,rating,strtime,time,day) values ('1','kalhmera','18','0001/01/2 3:00','60','Tuesday');
INSERT INTO programs(sid,name,rating,strtime,time,day) values ('1','kalhmera','18','0001/01/2 23:00','60','Tuesday');
INSERT INTO programs(sid,name,rating,strtime,time,day) values ('1','kalhmera','18','0001/01/3 00:00','80','Tuesday');
INSERT INTO programs(sid,name,rating,strtime,time,day) values ('1','kalhmera','18','0001/01/7 00:00','80','Sunday');     

select * from programs;

CREATE OR REPLACE FUNCTION getPrograms() RETURNS SETOF programs  AS $$
    SELECT * FROM programs ORDER BY identry;
$$  LANGUAGE sql;

CREATE OR REPLACE FUNCTION addPrograms(sidE int, name text, strtime time, times int, day text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    INSERT INTO programs (sidE,name,strtime,time,day)
    VALUES (sidE,name,strtime,times,day);
    END;
$function$;

CREATE OR REPLACE FUNCTION deletePrograms(id int)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    DELETE FROM programs where identry = id;
    END;
$function$;

CREATE OR REPLACE FUNCTION isOverlaping(timestamp ,timestamp) 
    RETURNS integer AS $$
        Select 1 from (
            SELECT
            CASE WHEN
            ($1 >= t2.strtime  AND $1 < t2.endtime ) OR
            ($2 > t2.strtime  AND $2 <= t2.endtime) OR
            ($1 <= t2.strtime  AND $2 >= t2.endtime) OR
            ($1 >= t2.strtime AND $2 <= t2.endtime)
            THEN
            'yes'
            ELSE
            'no'
            END AS OverLapping
            FROM programs AS t2
        ) AS overL
        where overlapping= 'yes'
$$  LANGUAGE sql
